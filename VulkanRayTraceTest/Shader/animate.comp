#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable

#include "Lighting.glsl"

struct Vertex
{
	vec3  Position;
	float Padding1;
	vec3  Normal;
	float Padding2;
	vec2  TexureCoord;
	vec2  Padding3;
	vec3  Tangant;
	float Padding4;
	vec3  BiTangant;
	float Padding5;
	vec4  Color;
	ivec4 BoneID ;
	vec4  BoneWeights;
 };

layout(binding = 0, scalar) buffer Vertices
{
  Vertex v[];
}
vertices;

layout(binding = 2) uniform UniformBufferObject {
	mat4 viewInverse;
	mat4 projInverse;
    mat4 model;
    mat4 view;
    mat4 proj;
    DirectionalLight dlight;
	vec3 viewPos;
	PointLight plight;
    float vertexSize;
    mat4 PVM;
    mat4 BoneTransform[1000];
    float timer;
} ubo;

layout(binding = 3) buffer MeshProperties 
{
	mat4 ModelTransform;
	mat4 BoneTransform[100];
	vec2 UVOffset;
} meshProperties[];


layout(binding = 6) buffer Transform { mat4 Transform; } MeshTransform[];

layout(push_constant) uniform ConstMeshProperties
{
	uint MeshID;
	uint ModelID;
	uint MaterialID;
} ConstMesh;

void main()
{
  Vertex v0 = vertices.v[gl_GlobalInvocationID.x];

  mat4 BoneTransform = mat4(1.0f);
  BoneTransform =  meshProperties[0].BoneTransform[v0.BoneID[0]] * v0.BoneWeights[0];
  BoneTransform += meshProperties[0].BoneTransform[v0.BoneID[1]] * v0.BoneWeights[1];
  BoneTransform += meshProperties[0].BoneTransform[v0.BoneID[2]] * v0.BoneWeights[2];
  BoneTransform += meshProperties[0].BoneTransform[v0.BoneID[3]] * v0.BoneWeights[3];
  vec4 BonePosition = BoneTransform * vec4(v0.Position, 1.0);

  v0.Position = vec3(ubo.model * MeshTransform[0].Transform * BonePosition);
  v0.Normal = normalize(transpose(inverse(mat3(ubo.model * MeshTransform[0].Transform * BoneTransform))) * v0.Normal);
  vertices.v[gl_GlobalInvocationID.x] = v0;
}