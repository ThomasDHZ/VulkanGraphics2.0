#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_debug_printf : enable

#include "Lighting.glsl"

layout(push_constant) uniform MeshInfo
{
	uint MeshIndex;
    mat4 proj;
    mat4 view;
    vec3 CameraPos;
} ConstMesh;

struct Vertex
{
	vec3  Position;
	float Padding1;
	vec3  Normal;
	float Padding2;
	vec2  TexureCoord;
	vec2  Padding3;
	vec3  Tangant;
	float Padding4;
	vec3  BiTangant;
	float Padding5;
 };

 struct Bones
 {
 	ivec4 BoneID;
	vec4  BoneWeights;
 };

layout(binding = 0, scalar) buffer Vertices { Vertex v[]; }vertices;
layout(binding = 1, scalar) buffer Bonesz { Bones b[]; }bone;

layout(binding = 3) buffer MeshProperties 
{
	mat4 ModelTransform;
	vec2 UVOffset;
    vec2 UVFlip;
    uint MaterialIndex;
    float heightScale;
	float minLayers;
	float maxLayers;
} meshProperties[];

layout(binding = 5, scalar) buffer BoneTransform { mat4 Transform[]; } MeshBoneTransform;
layout(binding = 6) buffer Transform { mat4 Transform; } MeshTransform[];

void main()
{
  Vertex v0 = vertices.v[gl_GlobalInvocationID.x];
  Bones b = bone.b[gl_GlobalInvocationID.x];

  mat4 BoneTransform = mat4(1.0f);
  BoneTransform =  MeshBoneTransform.Transform[b.BoneID[0]] * b.BoneWeights[0];
  BoneTransform += MeshBoneTransform.Transform[b.BoneID[1]] * b.BoneWeights[1];
  BoneTransform += MeshBoneTransform.Transform[b.BoneID[2]] * b.BoneWeights[2];
  BoneTransform += MeshBoneTransform.Transform[b.BoneID[3]] * b.BoneWeights[3];
  vec4 BonePosition = BoneTransform * vec4(v0.Position, 1.0);

  v0.Position = vec3(meshProperties[ConstMesh.MeshIndex].ModelTransform * MeshTransform[0].Transform * BonePosition);
  v0.Normal = normalize(transpose(inverse(mat3(meshProperties[ConstMesh.MeshIndex].ModelTransform * MeshTransform[0].Transform * BoneTransform))) * v0.Normal);
  vertices.v[gl_GlobalInvocationID.x] = v0;
}