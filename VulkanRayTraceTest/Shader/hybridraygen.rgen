#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_debug_printf : enable

#include "Lighting.glsl"

layout(push_constant) uniform RayTraceCamera
{
    mat4 proj;
    mat4 view;
    vec3 CameraPos;
} Camera;

struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D ShadowTextureMask;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	DirectionalLight dlight;
	PointLight plight[5];
	SpotLight sLight;
    mat4 viewInverse;
	mat4 projInverse;
	mat4 view;
	mat4 proj;
    vec3 viewPos;
    uint DirectionalLightCount;
    uint PointLightCount;
    uint SpotLightCount;
	float timer;
    int Shadowed;
    int temp;
} cam;
layout(binding = 14, set = 0, rgba8) uniform image2D ReflectionTexture;
layout(binding = 15, set = 0, rgba8) uniform image2D ReflectionMaskTexture;
layout(binding = 16, set = 0, rgba8) uniform image2D SSAOTexture;

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = Camera.view * vec4(0,0,0,1);
	vec4 target = Camera.proj * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = Camera.view*vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	rayPayload.color = vec3(0.0f);
	vec3 ReflectMask = vec3(0.0f);
	for (int x = 0; x < 20; x++) 
	{
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		if (rayPayload.reflector == 1.0f) 
		{
			const vec4 hitPos = origin + direction * rayPayload.distance;
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal);
			ReflectMask = vec3(1.0f, 0.0f, 0.0f);
		} 
		else 
		{
			rayPayload.color = vec3(0.0f);
			break;
		}
	}
	traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	
	imageStore(ReflectionTexture, ivec2(gl_LaunchIDEXT.xy),  vec4(rayPayload.color, 0.0));

}