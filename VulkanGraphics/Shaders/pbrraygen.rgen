#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_debug_printf : enable

#include "Lighting.glsl"
#include "RTXRandom.glsl"

layout(push_constant) uniform RayTraceConstants
{
    mat4 proj;
    mat4 view;
    vec3 CameraPos;
    uint frame;
    int AntiAliasingCount;
    int MaxRefeflectCount;
    int ApplyAntiAliasing;
	float TestRoughness;
    float SampleRate;
} Camera;

struct RayPayload {
	vec3 color;
	float seed;
	vec3 normal;
    int reflectCount;
    float domeSampleDelta;
    float domePhi;
    float domeTheta;
    float domeSampleCount;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D RayTracedTexture;
layout(binding = 2, set = 0) uniform CameraProperties 
{
    mat4 viewInverse;
	mat4 projInverse;
	mat4 view;
	mat4 proj;
    vec3 viewPos;
    uint DirectionalLightCount;
    uint PointLightCount;
    uint SpotLightCount;
	float timer;
    int Shadowed;
    int temp;
} cam;

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	//debugPrintfEXT("AntiAliasingCount: %i \n", Camera.AntiAliasingCount);
	if(Camera.ApplyAntiAliasing == 0)
	{
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec4 origin = Camera.view * vec4(0,0,0,1);
		vec4 target = Camera.proj * vec4(d.x, d.y, 1, 1) ;
		vec4 direction = Camera.view*vec4(normalize(target.xyz / target.w), 0);

		uint rayFlags = gl_RayFlagsOpaqueEXT;
		uint cullMask = 0xff;
		float tmin = 0.001;
		float tmax = 10000.0;

		rayPayload.color = vec3(1.0f);
		rayPayload.reflectCount = 0;
		rayPayload.domeSampleDelta = 0.025f;
		rayPayload.domePhi = 0.0f;
		rayPayload.domeTheta = 0.0f;
		rayPayload.domeSampleCount = 0;

		vec3 BaseColor = vec3(0.0f);
		vec3 finalColor = vec3(0.0f);
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

		imageStore(RayTracedTexture, ivec2(gl_LaunchIDEXT.xy),  vec4(rayPayload.color, 0.0));
	}
	else
	{
		rayPayload.color = vec3(1.0f);
		rayPayload.reflectCount = 0;
		rayPayload.domeSampleDelta = 0.025f;
		rayPayload.domePhi = 0.0f;
		rayPayload.domeTheta = 0.0f;
		rayPayload.domeSampleCount = 0;

		vec3 HitValues = vec3(0.0f);
		vec3 FinalColor = vec3(0.0f);
		uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, Camera.frame);
		uint rayFlags = gl_RayFlagsOpaqueEXT;
		uint cullMask = 0xff;
		float tmin = 0.001f;
		float tmax = 10000.0f;

		for(int x = 0; x < Camera.AntiAliasingCount; x++)
		{
			float r1 = rnd(seed);
			float r2 = rnd(seed);
			vec2 subPixel = vec2(0.5f);
			if(Camera.frame != 0);
			{
				subPixel = vec2(r1, r2);
			}

			const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subPixel;
			const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
			vec2 d = inUV * 2.0 - 1.0;

			vec4 origin = Camera.view * vec4(0,0,0,1);
			vec4 target = Camera.proj * vec4(d.x, d.y, 1, 1) ;
			vec4 direction = Camera.view*vec4(normalize(target.xyz / target.w), 0);

			rayPayload.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, Camera.frame);
			traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
			HitValues += rayPayload.color;
		}
		FinalColor = HitValues / Camera.AntiAliasingCount;

	   if(Camera.frame > 0 ||
		  Camera.frame > Camera.AntiAliasingCount)
	  {
			float a         = 1.0f / float(Camera.frame + 1);
			vec3  old_color = imageLoad(RayTracedTexture, ivec2(gl_LaunchIDEXT.xy)).xyz;
			imageStore(RayTracedTexture, ivec2(gl_LaunchIDEXT.xy),  vec4(mix(old_color, FinalColor, a), 1.0));
	  }
	  else
	  {
		imageStore(RayTracedTexture, ivec2(gl_LaunchIDEXT.xy),  vec4(FinalColor, 1.0));
	  }
  }
}